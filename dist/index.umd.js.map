{"version":3,"file":"index.umd.js","sources":["../src/helpers/string/replacePlaceholders.ts","../src/core/builder/makeI18n.ts","../src/core/helpers/importKeyset.ts","../src/core/helpers/parseContent.ts","../src/core/index.ts","../src/helpers/string/isPlural.ts","../src/eslintPlugin/rules/generateI18nFile.ts","../src/eslintPlugin/index.ts","../src/synchronizer/pull.ts","../src/synchronizer/push.ts","../src/index.ts"],"sourcesContent":["/**\n * Replaces placeholders in text with given values.\n * @param text          Text with placeholders\n * @param placeholders  Object with placeholders and values\n * @returns             Text with replaced placeholders\n */\nexport const replacePlaceholders = (\n    text: string,\n    placeholders: Record<string, string | number> = {},\n): string => {\n    return text.replace(/\\{(\\w+)}/g, (match, key) => {\n        return key in placeholders ? String(placeholders[key]) : match;\n    });\n};\n","import type { Keyset, Lang } from './types';\nimport { replacePlaceholders } from '../../helpers/string/replacePlaceholders';\n\ntype MakeI18nResponse = (key: string) => string;\n\n/**\n * Creates function to work with translations.\n * @param lang - Current app language\n * @param keyset - Translations keyset\n * @param placeholders - Placeholders and its values\n * @returns - Function to work with translations.\n */\nexport const makeI18n = (\n    lang: Lang,\n    keyset: Keyset,\n    placeholders?: Record<string, string | number>,\n): MakeI18nResponse => {\n    return (key: string) => {\n        const translations = keyset[key];\n\n        if (!translations) {\n            return '';\n        }\n\n        const translation = translations[lang];\n\n        if (typeof translation === 'object' && translation !== null) {\n            if (!placeholders) {\n                return translation.zero;\n            }\n\n            const countKey = Object.keys(placeholders).find((key) =>\n                /^count([0-9+]?)+$/.test(key),\n            );\n            const count =\n                countKey && countKey in placeholders\n                    ? Number(placeholders[countKey]) || 0\n                    : 0;\n            const pluralForm =\n                count === 0 ? 'zero' : new Intl.PluralRules(lang).select(count);\n\n            return replacePlaceholders(translation[pluralForm], placeholders);\n        }\n\n        return translation\n            ? replacePlaceholders(translation, placeholders)\n            : '';\n    };\n};\n","import type { Keyset } from '../builder/types';\n\n/**\n * Imports keyset from i18n file.\n * @param filePath - Path to file.\n * @returns - Keyset.\n */\nexport const importKeyset = async (filePath: string): Promise<Keyset> => {\n    let keyset = {};\n\n    try {\n        const module = await import(filePath);\n        keyset = module.keyset ?? {};\n    } catch (error) {\n        console.log(`Reading error: ${error}`);\n    }\n\n    return keyset;\n};\n","import type { Keyset } from '../builder/types';\n\n/**\n * Parses content from i18n file.\n * @param baseContent - Base string content.\n * @returns - Keyset.\n */\nexport const parseContent = (baseContent: string): Keyset => {\n    // remove keyset initialization\n    let content = baseContent.replace(/const keyset = |;/g, '');\n\n    // remove import\n    content = content.substring(content.indexOf('\\n') + 1);\n\n    // remove export\n    content = content.substring(0, content.lastIndexOf('\\n'));\n    content = content.substring(0, content.lastIndexOf('\\n'));\n    content = content.substring(0, content.lastIndexOf('\\n'));\n\n    let parsed = {};\n\n    try {\n        parsed = JSON.parse(content);\n    } catch (error) {\n        console.log(`JSON parse error: ${error}`);\n    }\n\n    return parsed;\n};\n","import type { Keyset, Lang } from './builder/types';\nimport { makeI18n } from './builder/makeI18n';\n\nexport { importKeyset } from './helpers/importKeyset';\nexport { parseContent } from './helpers/parseContent';\n\ntype Settings = {\n    /**\n     * Project language\n     * @default en\n     */\n    lang: Lang;\n};\n\n/**\n * Adds context wrapper to main function to store settings like app language.\n */\nexport class Api {\n    settings: Settings;\n\n    constructor() {\n        this.settings = {\n            lang: 'en',\n        };\n\n        this.setSettings = this.setSettings.bind(this);\n        this.makeI18n = this.makeI18n.bind(this);\n    }\n\n    setSettings(settings: Partial<Settings>) {\n        this.settings = {\n            ...this.settings,\n            ...settings,\n        };\n    }\n\n    makeI18n(keyset: Keyset, placeholders?: Record<string, string | number>) {\n        return makeI18n(this.settings.lang, keyset, placeholders);\n    }\n}\n","/**\n * Checks if the given text contains a plural placeholder.\n * A plural placeholder is defined as a string that starts with 'count' followed by an optional number.\n * @param text  The text to check for plural placeholders.\n * @returns     true if the text contains a plural placeholder, false otherwise.\n */\nexport const isPlural = (text: string): boolean => {\n    return /\\bcount\\d*\\b/.test(text);\n};\n","import type { Rule } from 'eslint';\nimport fs from 'fs';\nimport type { Config } from '../index';\nimport { isPlural } from '../../helpers/string/isPlural';\nimport path from 'path';\nimport { parseContent } from '../../core';\n\nconst moduleImportTemplate = \"import { makeI18n } from 'localang-i18n-js';\";\nconst moduleExportTemplate = 'export const i18n = makeI18n(keyset);';\n\nconst commonJSImportTemplate =\n    \"const { makeI18n } = require('localang-i18n-js');\";\nconst commonJSExportTemplate = 'module.exports = makeI18n(keyset);';\n\nconst getModuleImportFromI18nFileTemplate = (i18nFileName: string) =>\n    `import { i18n } from './${i18nFileName}';\\n`;\nconst getCommonJSImportFromI18nFileTemplate = (i18nFileName: string) =>\n    `const i18n = require('./${i18nFileName}');\\n`;\n\nconst importExportTemplates = {\n    module: {\n        importT: moduleImportTemplate,\n        exportT: moduleExportTemplate,\n        getImportFromI18nFileT: getModuleImportFromI18nFileTemplate,\n    },\n    commonjs: {\n        importT: commonJSImportTemplate,\n        exportT: commonJSExportTemplate,\n        getImportFromI18nFileT: getCommonJSImportFromI18nFileTemplate,\n    },\n};\n\n/**\n * Trying to parse i18n file.\n * @param fileName - Name of i18n file\n * @returns Parsed keyset or empty object\n */\nfunction loadKeyset(fileName: string) {\n    if (fs.existsSync(fileName)) {\n        const content = fs.readFileSync(fileName, 'utf8');\n\n        return parseContent(content);\n    }\n\n    return {};\n}\n\n/**\n * Saves keyset to i18n file.\n * @param fileName - Name of i18n file\n * @param keyset - Translations\n * @param exportT - String with export of keyset\n * @param importT - String with import of makeI18n function\n */\nfunction saveKeyset({\n    fileName,\n    keyset,\n    exportT,\n    importT,\n}: {\n    fileName: string;\n    keyset: Record<string, unknown>;\n    importT: string;\n    exportT: string;\n}) {\n    fs.writeFileSync(\n        fileName,\n        `${importT}\\n\\nconst keyset = ${JSON.stringify(\n            keyset,\n            null,\n            4,\n        )};\\n\\n${exportT}\\n`,\n    );\n}\n\n/**\n * Deletes file with keyset if it exists.\n * @param fileName - I18n file\n */\nfunction removeKeyset(fileName: string) {\n    if (fs.existsSync(fileName)) {\n        fs.unlinkSync(fileName);\n    }\n}\n\n/**\n * Adds import of i18n function from i18n file.\n * @param baseFile\n * @param importT\n */\nfunction addI18nFileImportStatement(baseFile: string, importT: string) {\n    const content = fs.readFileSync(baseFile, 'utf8');\n\n    const importRegex =\n        /import\\s*\\{\\s*i18n\\s*\\}\\s*from\\s*['\"]\\..*\\.i18n\\.js['\"]\\s*;/;\n    const requireRegex =\n        /const\\s*{\\s*i18n\\s*}\\s*=\\s*require\\s*\\(['\"]\\..*\\.i18n\\.js['\"]\\)\\s*;/;\n\n    if (!importRegex.test(content) && !requireRegex.test(content)) {\n        fs.writeFileSync(baseFile, importT + content);\n    }\n}\n\n/**\n * Builds rule which generates i18n files.\n * @param keyLanguage  Language which uses key\n * @param langs        Available languages\n * @param fileExt      I18n file extension\n * @param importType   Type of import and exports\n */\nexport const createGenerateI18nFileRule = ({\n    keyLanguage,\n    langs,\n    fileExt,\n    importType,\n}: Required<Config>): Rule.RuleModule => ({\n    create(context) {\n        const usedKeys: Set<string> = new Set();\n\n        const { importT, exportT, getImportFromI18nFileT } =\n            importExportTemplates[importType];\n\n        return {\n            'CallExpression'(node) {\n                if (\n                    'name' in node.callee &&\n                    node.callee?.name === 'i18n' &&\n                    node.arguments.length >= 1 &&\n                    node.arguments[0]?.type === 'Literal' &&\n                    typeof node.arguments[0].value === 'string' &&\n                    !context.filename.includes('.i18n.')\n                ) {\n                    usedKeys.add(node.arguments[0].value);\n                }\n            },\n            'Program:exit'() {\n                const fileName = context.filename.substring(\n                    0,\n                    context.filename.lastIndexOf('.'),\n                );\n                const i18nFileName = `${fileName}.i18n.${fileExt}`;\n                const existingKeyset = loadKeyset(i18nFileName);\n                const updatedKeyset = { ...existingKeyset };\n\n                usedKeys.forEach((key) => {\n                    if (!updatedKeyset[key]) {\n                        const isKeyPlural = isPlural(key);\n\n                        updatedKeyset[key] = {};\n\n                        langs.forEach((lang) => {\n                            const translation = lang === keyLanguage ? key : '';\n\n                            // @ts-expect-error -- TODO: TS2532: Object is possibly undefined\n                            updatedKeyset[key][lang] = isKeyPlural\n                                ? {\n                                      zero: translation,\n                                      one: translation,\n                                      two: translation,\n                                      few: translation,\n                                      many: translation,\n                                      other: translation,\n                                  }\n                                : translation;\n                        });\n                    }\n                });\n\n                Object.keys(existingKeyset).forEach((key) => {\n                    if (!usedKeys.has(key)) {\n                        delete updatedKeyset[key];\n                    }\n                });\n\n                if (Object.keys(updatedKeyset).length === 0) {\n                    removeKeyset(i18nFileName);\n                } else {\n                    saveKeyset({\n                        fileName: i18nFileName,\n                        keyset: updatedKeyset,\n                        importT,\n                        exportT,\n                    });\n\n                    addI18nFileImportStatement(\n                        context.filename,\n                        getImportFromI18nFileT(path.basename(i18nFileName)),\n                    );\n                }\n            },\n        };\n    },\n});\n","import type { ESLint } from 'eslint';\nimport { createGenerateI18nFileRule } from './rules/generateI18nFile';\nimport type { Lang } from '../core/builder/types';\n\n/** Plugin's config */\nexport interface Config {\n    /**\n     * Key will be the default translation for some language\n     * @default en\n     */\n    keyLanguage?: Lang;\n    /**\n     * Languages in use\n     * @default ['en']\n     */\n    langs?: Lang[];\n    /**\n     * Generated file extension\n     * @default js\n     */\n    fileExt?: 'js' | 'ts';\n    /**\n     * Import/export type for i18n files\n     * @default module\n     */\n    importType?: 'module' | 'commonjs';\n}\n\n/**\n * Creates ESLint plugin to generate I18n files.\n */\nexport const createEslintPlugin = ({\n    keyLanguage = 'en',\n    langs = ['en'],\n    fileExt = 'js',\n    importType = 'module',\n}: Config = {}): ESLint.Plugin => ({\n    // TODO: will it work instead of `ignores` in index.test.eslint.config.js?\n    configs: {\n        generateI18nFile: [\n            {\n                ignores: ['**/*.i18n.*'],\n            },\n        ],\n    },\n    rules: {\n        'generate-i18n-file': createGenerateI18nFileRule({\n            keyLanguage,\n            langs,\n            fileExt,\n            importType,\n        }),\n    },\n});\n","import fs from 'fs';\nimport https from 'https';\nimport type { Keyset } from '../core/builder/types';\n\n/**\n * Updates content of local files.\n * @param files - Files and keysets.\n */\nconst sync = (files: Array<{ filePath: string; keyset: Keyset }>) => {\n    files.forEach(({ filePath, keyset }) => {\n        if (!fs.existsSync(filePath)) {\n            console.log(`File ${filePath} doesn't exist`);\n            return;\n        }\n\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                throw new Error(\n                    `Error reading file ${filePath}: ${err.message}`,\n                );\n            }\n\n            const newObjectString = JSON.stringify(keyset, null, 4).replace(\n                /\"(\\w+)\":/g,\n                '$1:',\n            );\n            const regex = /const keyset = {[\\s\\S]*?};/;\n            const updatedCodeString = data.replace(\n                regex,\n                `const keyset = ${newObjectString};`,\n            );\n\n            fs.writeFileSync(filePath, updatedCodeString);\n        });\n    });\n};\n\n/**\n * Loads translations from localang.xyz and updates local files.\n * @param authToken - Authorization token with translations:read permission on localang.xyz.\n * @param projectId - ID of project on localang.xyz.\n */\nexport const pull = (authToken: string, projectId: number) => {\n    const req = https.request(\n        {\n            hostname: 'https://localang.xyz',\n            port: 443,\n            path: `/api/translations/getAll?project_id=${projectId}`,\n            method: 'GET',\n            headers: {\n                'Authorization': `Bearer ${authToken}`,\n                'Content-Type': 'application/json',\n            },\n        },\n        (res) => {\n            let data = '';\n\n            res.on('data', (chunk) => {\n                data += chunk;\n            });\n\n            res.on('end', () => {\n                const result = JSON.parse(data);\n\n                if (result?.status !== 'success') {\n                    throw new Error('Error getting keysets');\n                }\n\n                sync(result.files);\n            });\n        },\n    );\n\n    req.on('error', function (e) {\n        throw new Error(`Error syncing keysets: ${e.message}`);\n    });\n\n    req.end();\n};\n","import path from 'path';\nimport fs from 'fs';\nimport https from 'https';\nimport { importKeyset } from '../core';\nimport type { Keyset } from '../core/builder/types';\n\n/**\n * Uploads local translations to localang.xyz.\n * @param authToken - Authorization token with translations:update permission on localang.xyz.\n * @param projectId - ID of project on localang.xyz.\n * @param files - I18n files from which translations should be used.\n */\nexport const push = (authToken: string, projectId: number, files: string[]) => {\n    const requestData: Record<\n        string,\n        {\n            operation: 'update' | 'delete';\n            translations?: Keyset;\n        }\n    > = {};\n\n    files.forEach(async (file) => {\n        const filePath = path.resolve(process.cwd(), file);\n        const baseFile = filePath.replace(/\\.i18n\\./, '.');\n\n        if (fs.existsSync(filePath)) {\n            try {\n                const content = await importKeyset(filePath);\n\n                requestData[baseFile] = {\n                    operation: 'update',\n                    translations: content,\n                };\n            } catch (parseError: unknown) {\n                throw new Error(\n                    `Error parsing JSON in file ${file}: ${\n                        typeof parseError === 'object' &&\n                        parseError !== null &&\n                        'message' in parseError\n                            ? parseError.message\n                            : ''\n                    }`,\n                );\n            }\n        } else {\n            requestData[baseFile] = {\n                operation: 'delete',\n            };\n        }\n    });\n\n    const req = https.request(\n        {\n            hostname: 'https://localang.xyz',\n            port: 443,\n            path: '/api/translations/update',\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${authToken}`,\n                'Content-Type': 'application/json',\n            },\n        },\n        (res) => {\n            let data = '';\n\n            res.on('data', (chunk) => {\n                data += chunk;\n            });\n\n            res.on('end', () => {\n                const result = JSON.parse(data);\n\n                if (result?.status !== 'success') {\n                    throw new Error('Error syncing keysets');\n                }\n            });\n        },\n    );\n\n    req.write({\n        project_id: projectId,\n        files: requestData,\n    });\n\n    req.on('error', function (e) {\n        throw new Error(`Error syncing keysets: ${e.message}`);\n    });\n\n    req.end();\n};\n","import { Api as I18nApi } from './core';\n\nexport const { makeI18n, setSettings } = new I18nApi();\n\nexport { createEslintPlugin } from './eslintPlugin';\n\nexport { pull, push } from './synchronizer';\n"],"names":["makeI18n","I18nApi"],"mappings":"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"}