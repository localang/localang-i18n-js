{"version":3,"file":"index.umd.min.js","sources":["../src/helpers/string/replacePlaceholders.ts","../src/core/helpers/parseContent.ts","../src/core/index.ts","../src/core/builder/makeI18n.ts","../src/eslintPlugin/rules/generateI18nFile.ts","../src/helpers/string/isPlural.ts","../src/index.ts","../src/eslintPlugin/index.ts","../src/synchronizer/pull.ts","../src/synchronizer/push.ts"],"sourcesContent":["/**\n * Replaces placeholders in text with given values.\n * @param text          Text with placeholders\n * @param placeholders  Object with placeholders and values\n * @returns             Text with replaced placeholders\n */\nexport const replacePlaceholders = (\n    text: string,\n    placeholders: Record<string, string | number> = {},\n): string => {\n    return text.replace(/\\{(\\w+)}/g, (match, key) => {\n        return key in placeholders ? String(placeholders[key]) : match;\n    });\n};\n","import type { Keyset } from '../builder/types';\n\n/**\n * Parses content from i18n file.\n * @param baseContent - Base string content.\n * @returns - Keyset.\n */\nexport const parseContent = (baseContent: string): Keyset => {\n    // remove keyset initialization\n    let content = baseContent.replace(/const keyset = |;/g, '');\n\n    // remove import\n    content = content.substring(content.indexOf('\\n') + 1);\n\n    // remove export\n    content = content.substring(0, content.lastIndexOf('\\n'));\n    content = content.substring(0, content.lastIndexOf('\\n'));\n\n    let parsed = {};\n\n    try {\n        parsed = JSON.parse(content);\n    } catch (error) {\n        console.log(`JSON parse error: ${error}`);\n    }\n\n    return parsed;\n};\n","import type { Keyset, Lang } from './builder/types';\nimport { makeI18n } from './builder/makeI18n';\n\nexport { importKeyset } from './helpers/importKeyset';\nexport { parseContent } from './helpers/parseContent';\n\ntype Settings = {\n    /**\n     * Project language\n     * @default en\n     */\n    lang: Lang;\n};\n\n/**\n * Adds context wrapper to main function to store settings like app language.\n */\nexport class Api {\n    settings: Settings;\n\n    constructor() {\n        this.settings = {\n            lang: 'en',\n        };\n\n        this.setSettings = this.setSettings.bind(this);\n        this.makeI18n = this.makeI18n.bind(this);\n    }\n\n    setSettings(settings: Partial<Settings>) {\n        this.settings = {\n            ...this.settings,\n            ...settings,\n        };\n    }\n\n    makeI18n(keyset: Keyset) {\n        return makeI18n(this.settings.lang, keyset);\n    }\n}\n","import type { Keyset, Lang } from './types';\nimport { replacePlaceholders } from '../../helpers/string/replacePlaceholders';\n\ntype MakeI18nResponse = (\n    key: string,\n    placeholders?: Record<string, string | number>,\n) => string;\n\n/**\n * Creates function to work with translations.\n * @param lang - Current app language\n * @param keyset - Translations keyset\n * @returns - Function to work with translations.\n */\nexport const makeI18n = (lang: Lang, keyset: Keyset): MakeI18nResponse => {\n    return (key: string, placeholders?: Record<string, string | number>) => {\n        const translations = keyset[key];\n\n        if (!translations) {\n            return '';\n        }\n\n        const translation = translations[lang];\n\n        if (typeof translation === 'object' && translation !== null) {\n            if (!placeholders) {\n                return translation.zero;\n            }\n\n            const countKey = Object.keys(placeholders).find((key) =>\n                /^count([0-9+]?)+$/.test(key),\n            );\n            const count =\n                countKey && countKey in placeholders\n                    ? Number(placeholders[countKey]) || 0\n                    : 0;\n            const pluralForm =\n                count === 0 ? 'zero' : new Intl.PluralRules(lang).select(count);\n\n            return replacePlaceholders(translation[pluralForm], placeholders);\n        }\n\n        return translation\n            ? replacePlaceholders(translation, placeholders)\n            : '';\n    };\n};\n","import type { Rule } from 'eslint';\nimport fs from 'fs';\nimport type { Config } from '../index';\nimport { isPlural } from '../../helpers/string/isPlural';\nimport path from 'path';\nimport { parseContent } from '../../core';\n\nconst moduleImportTemplate = \"import { makeI18n } from 'localang-i18n-js';\";\nconst moduleExportTemplate = 'export const i18n = makeI18n(keyset);';\n\nconst commonJSImportTemplate =\n    \"const { makeI18n } = require('localang-i18n-js');\";\nconst commonJSExportTemplate = 'module.exports = makeI18n(keyset);';\n\nconst getModuleImportFromI18nFileTemplate = (i18nFileName: string) =>\n    `import { i18n } from './${i18nFileName}';\\n`;\nconst getCommonJSImportFromI18nFileTemplate = (i18nFileName: string) =>\n    `const i18n = require('./${i18nFileName}');\\n`;\n\nconst importExportTemplates = {\n    module: {\n        importT: moduleImportTemplate,\n        exportT: moduleExportTemplate,\n        getImportFromI18nFileT: getModuleImportFromI18nFileTemplate,\n    },\n    commonjs: {\n        importT: commonJSImportTemplate,\n        exportT: commonJSExportTemplate,\n        getImportFromI18nFileT: getCommonJSImportFromI18nFileTemplate,\n    },\n};\n\n/**\n * Trying to parse i18n file.\n * @param fileName - Name of i18n file\n * @returns Parsed keyset or empty object\n */\nfunction loadKeyset(fileName: string) {\n    if (fs.existsSync(fileName)) {\n        const content = fs.readFileSync(fileName, 'utf8');\n\n        return parseContent(content);\n    }\n\n    return {};\n}\n\n/**\n * Saves keyset to i18n file.\n * @param fileName - Name of i18n file\n * @param keyset - Translations\n * @param exportT - String with export of keyset\n * @param importT - String with import of makeI18n function\n */\nfunction saveKeyset({\n    fileName,\n    keyset,\n    exportT,\n    importT,\n}: {\n    fileName: string;\n    keyset: Record<string, unknown>;\n    importT: string;\n    exportT: string;\n}) {\n    fs.writeFileSync(\n        fileName,\n        `${importT}\\n\\nconst keyset = ${JSON.stringify(\n            keyset,\n            null,\n            4,\n        )};\\n\\n${exportT}\\n`,\n    );\n}\n\n/**\n * Deletes file with keyset if it exists.\n * @param fileName - I18n file\n */\nfunction removeKeyset(fileName: string) {\n    if (fs.existsSync(fileName)) {\n        fs.unlinkSync(fileName);\n    }\n}\n\n/**\n * Adds import of i18n function from i18n file.\n * @param baseFile - File which imports i18n\n * @param baseI18nFileNameWithoutExt - Name of i18n file without extension\n * @param importT - Import string\n */\nfunction addI18nFileImportStatement(\n    baseFile: string,\n    baseI18nFileNameWithoutExt: string,\n    importT: string,\n) {\n    const content = fs.readFileSync(baseFile, 'utf8');\n\n    if (!content.includes(baseI18nFileNameWithoutExt)) {\n        fs.writeFileSync(baseFile, importT + content);\n    }\n}\n\n/**\n * Builds rule which generates i18n files.\n * @param keyLanguage - Language which uses key\n * @param langs - Available languages\n * @param fileExt - I18n file extension\n * @param importType - Type of import and exports\n */\nexport const createGenerateI18nFileRule = ({\n    keyLanguage,\n    langs,\n    fileExt,\n    importType,\n}: Required<Config>): Rule.RuleModule => ({\n    create(context) {\n        const usedKeys: Set<string> = new Set();\n\n        const { importT, exportT, getImportFromI18nFileT } =\n            importExportTemplates[importType];\n\n        return {\n            'CallExpression'(node) {\n                if (\n                    'name' in node.callee &&\n                    node.callee?.name === 'i18n' &&\n                    node.arguments.length >= 1 &&\n                    node.arguments[0]?.type === 'Literal' &&\n                    typeof node.arguments[0].value === 'string' &&\n                    !context.filename.includes('.i18n.')\n                ) {\n                    usedKeys.add(node.arguments[0].value);\n                }\n            },\n            'Program:exit'() {\n                const fileName = context.filename.substring(\n                    0,\n                    context.filename.lastIndexOf('.'),\n                );\n                const baseName = path.basename(context.filename);\n                const baseFileName = baseName.substring(\n                    0,\n                    baseName.lastIndexOf('.'),\n                );\n                const baseI18nFileNameWithoutExt = `${baseFileName}.i18n`;\n                const i18nFileName = `${fileName}.i18n.${fileExt}`;\n                const existingKeyset = loadKeyset(i18nFileName);\n                const updatedKeyset = { ...existingKeyset };\n\n                usedKeys.forEach((key) => {\n                    if (!updatedKeyset[key]) {\n                        const isKeyPlural = isPlural(key);\n\n                        updatedKeyset[key] = {};\n\n                        langs.forEach((lang) => {\n                            const translation = lang === keyLanguage ? key : '';\n\n                            // @ts-expect-error -- TODO: TS2532: Object is possibly undefined\n                            updatedKeyset[key][lang] = isKeyPlural\n                                ? {\n                                      zero: translation,\n                                      one: translation,\n                                      two: translation,\n                                      few: translation,\n                                      many: translation,\n                                      other: translation,\n                                  }\n                                : translation;\n                        });\n                    }\n                });\n\n                Object.keys(existingKeyset).forEach((key) => {\n                    if (!usedKeys.has(key)) {\n                        delete updatedKeyset[key];\n                    }\n                });\n\n                if (Object.keys(updatedKeyset).length === 0) {\n                    removeKeyset(i18nFileName);\n                } else {\n                    saveKeyset({\n                        fileName: i18nFileName,\n                        keyset: updatedKeyset,\n                        importT,\n                        exportT,\n                    });\n\n                    addI18nFileImportStatement(\n                        context.filename,\n                        baseI18nFileNameWithoutExt,\n                        getImportFromI18nFileT(baseI18nFileNameWithoutExt),\n                    );\n                }\n            },\n        };\n    },\n});\n","/**\n * Checks if the given text contains a plural placeholder.\n * A plural placeholder is defined as a string that starts with 'count' followed by an optional number.\n * @param text  The text to check for plural placeholders.\n * @returns     true if the text contains a plural placeholder, false otherwise.\n */\nexport const isPlural = (text: string): boolean => {\n    return /\\bcount\\d*\\b/.test(text);\n};\n","import { Api as I18nApi } from './core';\n\nexport const { makeI18n, setSettings } = new I18nApi();\n\nexport { createEslintPlugin } from './eslintPlugin';\n\nexport { pull, push } from './synchronizer';\n","import type { ESLint } from 'eslint';\nimport { createGenerateI18nFileRule } from './rules/generateI18nFile';\nimport type { Lang } from '../core/builder/types';\n\n/** Plugin's config */\nexport interface Config {\n    /**\n     * Key will be the default translation for some language\n     * @default en\n     */\n    keyLanguage?: Lang;\n    /**\n     * Languages in use\n     * @default ['en']\n     */\n    langs?: Lang[];\n    /**\n     * Generated file extension\n     * @default js\n     */\n    fileExt?: 'js' | 'ts';\n    /**\n     * Import/export type for i18n files\n     * @default module\n     */\n    importType?: 'module' | 'commonjs';\n}\n\n/**\n * Creates ESLint plugin to generate I18n files.\n */\nexport const createEslintPlugin = ({\n    keyLanguage = 'en',\n    langs = ['en'],\n    fileExt = 'js',\n    importType = 'module',\n}: Config = {}): ESLint.Plugin => ({\n    rules: {\n        'generate-i18n-file': createGenerateI18nFileRule({\n            keyLanguage,\n            langs,\n            fileExt,\n            importType,\n        }),\n    },\n});\n","import fs from 'fs';\nimport https from 'https';\nimport type { Keyset } from '../core/builder/types';\n\n/**\n * Updates content of local files.\n * @param files - Files and keysets.\n */\nconst sync = (files: Array<{ filePath: string; keyset: Keyset }>) => {\n    files.forEach(({ filePath, keyset }) => {\n        const filePathSplit = filePath.split('.');\n        filePathSplit[filePathSplit.length - 1] = `i18n.${filePathSplit.at(\n            -1,\n        )}`;\n        const i18nFilePath = filePathSplit.join('.');\n\n        if (!fs.existsSync(i18nFilePath)) {\n            console.log(`File ${i18nFilePath} doesn't exist`);\n            return;\n        }\n\n        fs.readFile(i18nFilePath, 'utf8', (err, data) => {\n            if (err) {\n                throw new Error(\n                    `Error reading file ${i18nFilePath}: ${err.message}`,\n                );\n            }\n\n            const newObjectString = JSON.stringify(keyset, null, 4);\n            const regex = /const keyset = {[\\s\\S]*?};/;\n            const updatedCodeString = data.replace(\n                regex,\n                `const keyset = ${newObjectString};`,\n            );\n\n            fs.writeFileSync(i18nFilePath, updatedCodeString);\n        });\n    });\n};\n\n/**\n * Loads translations from localang.xyz and updates local files.\n * @param authToken - Authorization token with translations:read permission on localang.xyz.\n * @param projectId - ID of project on localang.xyz.\n */\nexport const pull = (authToken: string, projectId: number) => {\n    const req = https.request(\n        {\n            hostname: 'localang.xyz',\n            port: 443,\n            path: `/api/translations/getAll?project_id=${projectId}`,\n            method: 'GET',\n            headers: {\n                'Authorization': `Bearer ${authToken}`,\n                'Content-Type': 'application/json',\n            },\n        },\n        (res) => {\n            let data = '';\n\n            res.on('data', (chunk) => {\n                data += chunk;\n            });\n\n            res.on('end', () => {\n                const result = JSON.parse(data);\n\n                if (result?.status !== 'success') {\n                    throw new Error('Error getting keysets');\n                }\n\n                sync(result.files);\n            });\n        },\n    );\n\n    req.on('error', function (e) {\n        throw new Error(`Error syncing keysets: ${e.message}`);\n    });\n\n    req.end();\n};\n","import path from 'path';\nimport fs from 'fs';\nimport https from 'https';\nimport { parseContent } from '../core';\nimport type { Keyset } from '../core/builder/types';\n\n/**\n * Uploads local translations to localang.xyz.\n * @param authToken - Authorization token with translations:update permission on localang.xyz.\n * @param projectId - ID of project on localang.xyz.\n * @param files - I18n files from which translations should be used.\n */\nexport const push = (authToken: string, projectId: number, files: string[]) => {\n    const requestData: Record<\n        string,\n        {\n            operation: 'update' | 'delete';\n            translations?: Keyset;\n        }\n    > = {};\n\n    files.forEach(async (file) => {\n        const filePath = path.resolve(process.cwd(), file);\n        const baseFile = file.replace(/\\.i18n\\./, '.');\n\n        if (fs.existsSync(filePath)) {\n            const baseContent = fs.readFileSync(filePath, 'utf8');\n            const content = parseContent(baseContent);\n\n            requestData[baseFile] = {\n                operation: 'update',\n                translations: content,\n            };\n        } else {\n            requestData[baseFile] = {\n                operation: 'delete',\n            };\n        }\n    });\n\n    const req = https.request(\n        {\n            hostname: 'localang.xyz',\n            port: 443,\n            path: '/api/translations/update',\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${authToken}`,\n                'Content-Type': 'application/json',\n            },\n        },\n        (res) => {\n            let data = '';\n\n            res.on('data', (chunk) => {\n                data += chunk;\n            });\n\n            res.on('end', () => {\n                const result = JSON.parse(data);\n\n                if (result?.status !== 'success') {\n                    throw new Error('Error syncing keysets');\n                }\n            });\n        },\n    );\n\n    req.write(\n        JSON.stringify({\n            project_id: projectId,\n            files: requestData,\n        }),\n    );\n\n    req.on('error', function (e) {\n        throw new Error(`Error syncing keysets: ${e.message}`);\n    });\n\n    req.end();\n};\n"],"names":["replacePlaceholders","text","placeholders","replace","match","key","String","parseContent","baseContent","content","substring","indexOf","lastIndexOf","parsed","JSON","parse","error","console","log","Api","this","settings","lang","setSettings","bind","makeI18n","prototype","__assign","keyset","translations","translation","zero","countKey","Object","keys","find","test","count","Number","pluralForm","Intl","PluralRules","select","importExportTemplates","module","importT","exportT","getImportFromI18nFileT","i18nFileName","concat","commonjs","createGenerateI18nFileRule","_a","keyLanguage","langs","fileExt","importType","create","context","usedKeys","Set","CallExpression","node","callee","name","arguments","length","_b","type","value","filename","includes","add","fileName","baseName","path","basename","baseFileName","baseI18nFileNameWithoutExt","existingKeyset","fs","existsSync","readFileSync","loadKeyset","updatedKeyset","forEach","isKeyPlural_1","one","two","few","many","other","has","unlinkSync","removeKeyset","writeFileSync","stringify","saveKeyset","baseFile","addI18nFileImportStatement","I18nApi","_c","_d","_e","_f","rules","authToken","projectId","req","https","request","hostname","port","method","headers","Authorization","res","data","on","chunk","result","status","Error","files","filePath","filePathSplit","split","at","i18nFilePath","join","readFile","err","message","newObjectString","updatedCodeString","e","end","requestData","file","__awaiter","resolve","process","cwd","operation","write","project_id"],"mappings":";;;;;q7DAMO,IAAMA,EAAsB,SAC/BC,EACAC,GAEA,YAFA,IAAAA,IAAAA,EAAkD,CAAA,GAE3CD,EAAKE,QAAQ,aAAa,SAACC,EAAOC,GACrC,OAAOA,KAAOH,EAAeI,OAAOJ,EAAaG,IAAQD,CAC7D,GACJ,ECNaG,EAAe,SAACC,GAEzB,IAAIC,EAAUD,EAAYL,QAAQ,qBAAsB,IAOxDM,GADAA,GAHAA,EAAUA,EAAQC,UAAUD,EAAQE,QAAQ,MAAQ,IAGlCD,UAAU,EAAGD,EAAQG,YAAY,QACjCF,UAAU,EAAGD,EAAQG,YAAY,OAEnD,IAAIC,EAAS,CAAA,EAEb,IACIA,EAASC,KAAKC,MAAMN,EACvB,CAAC,MAAOO,GACLC,QAAQC,IAAI,4BAAqBF,GACpC,CAED,OAAOH,CACX,ECVAM,EAAA,WAGI,SAAAA,IACIC,KAAKC,SAAW,CACZC,KAAM,MAGVF,KAAKG,YAAcH,KAAKG,YAAYC,KAAKJ,MACzCA,KAAKK,SAAWL,KAAKK,SAASD,KAAKJ,KACtC,CAYL,OAVID,EAAWO,UAAAH,YAAX,SAAYF,GACRD,KAAKC,SACEM,EAAAA,EAAA,CAAA,EAAAP,KAAKC,UACLA,IAIXF,EAAQO,UAAAD,SAAR,SAASG,GACL,OCvBgB,SAACN,EAAYM,GACjC,OAAO,SAACvB,EAAaH,GACjB,IAAM2B,EAAeD,EAAOvB,GAE5B,IAAKwB,EACD,MAAO,GAGX,IAAMC,EAAcD,EAAaP,GAEjC,GAA2B,iBAAhBQ,GAA4C,OAAhBA,EAAsB,CACzD,IAAK5B,EACD,OAAO4B,EAAYC,KAGvB,IAAMC,EAAWC,OAAOC,KAAKhC,GAAciC,MAAK,SAAC9B,GAC7C,MAAA,oBAAoB+B,KAAK/B,EAAzB,IAEEgC,EACFL,GAAYA,KAAY9B,GAClBoC,OAAOpC,EAAa8B,KACpB,EACJO,EACQ,IAAVF,EAAc,OAAS,IAAIG,KAAKC,YAAYnB,GAAMoB,OAAOL,GAE7D,OAAOrC,EAAoB8B,EAAYS,GAAarC,EACvD,CAED,OAAO4B,EACD9B,EAAoB8B,EAAa5B,GACjC,EACV,CACJ,CDTeuB,CAASL,KAAKC,SAASC,KAAMM,IAE3CT,CAAD,IEpBMwB,EAAwB,CAC1BC,OAAQ,CACJC,QAdqB,+CAerBC,QAdqB,wCAerBC,uBAToC,SAACC,GACzC,MAAA,2BAAAC,OAA2BD,EAAkB,OAA7C,GAUAE,SAAU,CACNL,QAfJ,oDAgBIC,QAfuB,qCAgBvBC,uBAZsC,SAACC,GAC3C,MAAA,2BAAAC,OAA2BD,EAAmB,QAA9C,IA6FG,MAAMG,EAA6B,SAACC,OACvCC,EAAWD,EAAAC,YACXC,EAAKF,EAAAE,MACLC,EAAOH,EAAAG,QACPC,EAAUJ,EAAAI,WAC2B,MAAC,CACtCC,gBAAOC,GACH,IAAMC,EAAwB,IAAIC,IAE5BR,EACFT,EAAsBa,GADlBX,EAAOO,EAAAP,QAAEC,EAAOM,EAAAN,QAAEC,2BAG1B,MAAO,CACHc,wBAAiBC,WAET,SAAUA,EAAKC,QACO,UAAT,UAAbD,EAAKC,cAAQ,IAAAX,OAAA,EAAAA,EAAAY,OACbF,EAAKG,UAAUC,QAAU,GACG,aAAX,QAAjBC,EAAAL,EAAKG,UAAU,UAAE,IAAAE,OAAA,EAAAA,EAAEC,OACgB,iBAA5BN,EAAKG,UAAU,GAAGI,QACxBX,EAAQY,SAASC,SAAS,WAE3BZ,EAASa,IAAIV,EAAKG,UAAU,GAAGI,MAEtC,EACD,eAAc,WACV,IAAMI,EAAWf,EAAQY,SAAS5D,UAC9B,EACAgD,EAAQY,SAAS1D,YAAY,MAE3B8D,EAAWC,EAAKC,SAASlB,EAAQY,UACjCO,EAAeH,EAAShE,UAC1B,EACAgE,EAAS9D,YAAY,MAEnBkE,EAA6B,GAAG7B,OAAA4B,WAChC7B,EAAe,GAAAC,OAAGwB,EAAiB,UAAAxB,OAAAM,GACnCwB,EA9GtB,SAAoBN,GAChB,GAAIO,EAAGC,WAAWR,GAAW,CACzB,IAAMhE,EAAUuE,EAAGE,aAAaT,EAAU,QAE1C,OAAOlE,EAAaE,EACvB,CAED,MAAO,EACX,CAsGuC0E,CAAWnC,GAC5BoC,EAAazD,EAAA,CAAA,EAAQoD,GAE3BpB,EAAS0B,SAAQ,SAAChF,GACd,IAAK+E,EAAc/E,GAAM,CACrB,IAAMiF,ECjJnB,eAAelD,KDiJ2B/B,GAE7B+E,EAAc/E,GAAO,GAErBiD,EAAM+B,SAAQ,SAAC/D,GACX,IAAMQ,EAAcR,IAAS+B,EAAchD,EAAM,GAGjD+E,EAAc/E,GAAKiB,GAAQgE,EACrB,CACIvD,KAAMD,EACNyD,IAAKzD,EACL0D,IAAK1D,EACL2D,IAAK3D,EACL4D,KAAM5D,EACN6D,MAAO7D,GAEXA,CACV,GACH,CACL,IAEAG,OAAOC,KAAK6C,GAAgBM,SAAQ,SAAChF,GAC5BsD,EAASiC,IAAIvF,WACP+E,EAAc/E,EAE7B,IAE0C,IAAtC4B,OAAOC,KAAKkD,GAAelB,OArG/C,SAAsBO,GACdO,EAAGC,WAAWR,IACdO,EAAGa,WAAWpB,EAEtB,CAkGoBqB,CAAa9C,IA/HjC,SAAoBI,OAChBqB,EAAQrB,EAAAqB,SACR7C,EAAMwB,EAAAxB,OACNkB,EAAOM,EAAAN,QACPD,EAAOO,EAAAP,QAOPmC,EAAGe,cACCtB,EACA,GAAGxB,OAAAJ,EAA6B,uBAAAI,OAAAnC,KAAKkF,UACjCpE,EACA,KACA,GACK,SAAAqB,OAAAH,EAAW,MAE5B,CA8GoBmD,CAAW,CACPxB,SAAUzB,EACVpB,OAAQwD,EACRvC,QAAOA,EACPC,QAAOA,IAhG/B,SACIoD,EACApB,EACAjC,GAEA,IAAMpC,EAAUuE,EAAGE,aAAagB,EAAU,QAErCzF,EAAQ8D,SAASO,IAClBE,EAAGe,cAAcG,EAAUrD,EAAUpC,EAE7C,CAyFoB0F,CACIzC,EAAQY,SACRQ,EACA/B,EAAuB+B,IAGlC,EAER,EAnFoC,EEjH1BrD,GAAF2B,EAA4B,IAAIgD,GAAtB3E,SAAEF,EAAW6B,EAAA7B,iCC6BF,SAAC6B,GAAA,IAAAe,OAAA,IAAAf,EAKvB,CAAE,EAAAA,EAJViD,EAAAlC,EAAAd,YAAAA,OAAc,IAAAgD,EAAA,KAAIA,EAClBC,EAAcnC,EAAAb,MAAdA,OAAQ,IAAAgD,EAAA,CAAC,MAAKA,EACdC,EAAcpC,EAAAZ,QAAdA,OAAU,IAAAgD,EAAA,KAAIA,EACdC,EAAqBrC,EAAAX,WACS,MAAC,CAC/BiD,MAAO,CACH,qBAAsBtD,EAA2B,CAC7CE,YAAWA,EACXC,MAAKA,EACLC,QAAOA,EACPC,gBAPE,IAAAgD,EAAG,SAAQA,KACS,sBCSd,SAACE,EAAmBC,GACpC,IAAMC,EAAMC,EAAMC,QACd,CACIC,SAAU,eACVC,KAAM,IACNrC,KAAM,uCAAuC1B,OAAA0D,GAC7CM,OAAQ,MACRC,QAAS,CACLC,cAAiB,UAAUlE,OAAAyD,GAC3B,eAAgB,sBAGxB,SAACU,GACG,IAAIC,EAAO,GAEXD,EAAIE,GAAG,QAAQ,SAACC,GACZF,GAAQE,CACZ,IAEAH,EAAIE,GAAG,OAAO,WACV,IAAME,EAAS1G,KAAKC,MAAMsG,GAE1B,GAAuB,aAAnBG,aAAM,EAANA,EAAQC,QACR,MAAM,IAAIC,MAAM,yBAGfF,EAAOG,MA9DlBtC,SAAQ,SAACjC,OAAEwE,EAAQxE,EAAAwE,SAAEhG,EAAMwB,EAAAxB,OACvBiG,EAAgBD,EAASE,MAAM,KACrCD,EAAcA,EAAc3D,OAAS,GAAK,QAAQjB,OAAA4E,EAAcE,IAC3D,IAEL,IAAMC,EAAeH,EAAcI,KAAK,KAEnCjD,EAAGC,WAAW+C,GAKnBhD,EAAGkD,SAASF,EAAc,QAAQ,SAACG,EAAKd,GACpC,GAAIc,EACA,MAAM,IAAIT,MACN,sBAAsBzE,OAAA+E,EAAiB,MAAA/E,OAAAkF,EAAIC,UAInD,IAAMC,EAAkBvH,KAAKkF,UAAUpE,EAAQ,KAAM,GAE/C0G,EAAoBjB,EAAKlH,QADjB,6BAGV,kBAAkB8C,OAAAoF,EAAkB,MAGxCrD,EAAGe,cAAciC,EAAcM,EACnC,IAnBIrH,QAAQC,IAAI,eAAQ8G,EAAY,kBAoBxC,GAmCQ,GACJ,IAGJpB,EAAIU,GAAG,SAAS,SAAUiB,GACtB,MAAM,IAAIb,MAAM,0BAAAzE,OAA0BsF,EAAEH,SAChD,IAEAxB,EAAI4B,KACR,SCrEoB,SAAC9B,EAAmBC,EAAmBgB,GACvD,IAAMc,EAMF,CAAA,EAEJd,EAAMtC,SAAQ,SAAOqD,GAAI,OAAAC,OAAA,OAAA,OAAA,GAAA,yDACff,EAAWjD,EAAKiE,QAAQC,QAAQC,MAAOJ,GACvCxC,EAAWwC,EAAKvI,QAAQ,WAAY,KAEtC6E,EAAGC,WAAW2C,IACRpH,EAAcwE,EAAGE,aAAa0C,EAAU,QACxCnH,EAAUF,EAAaC,GAE7BiI,EAAYvC,GAAY,CACpB6C,UAAW,SACXlH,aAAcpB,IAGlBgI,EAAYvC,GAAY,CACpB6C,UAAW,gBAGtB,GAAA,IAED,IAAMnC,EAAMC,EAAMC,QACd,CACIC,SAAU,eACVC,KAAM,IACNrC,KAAM,2BACNsC,OAAQ,OACRC,QAAS,CACLC,cAAiB,UAAUlE,OAAAyD,GAC3B,eAAgB,sBAGxB,SAACU,GACG,IAAIC,EAAO,GAEXD,EAAIE,GAAG,QAAQ,SAACC,GACZF,GAAQE,CACZ,IAEAH,EAAIE,GAAG,OAAO,WACV,IAAME,EAAS1G,KAAKC,MAAMsG,GAE1B,GAAuB,aAAnBG,aAAM,EAANA,EAAQC,QACR,MAAM,IAAIC,MAAM,wBAExB,GACJ,IAGJd,EAAIoC,MACAlI,KAAKkF,UAAU,CACXiD,WAAYtC,EACZgB,MAAOc,KAIf7B,EAAIU,GAAG,SAAS,SAAUiB,GACtB,MAAM,IAAIb,MAAM,0BAAAzE,OAA0BsF,EAAEH,SAChD,IAEAxB,EAAI4B,KACR"}