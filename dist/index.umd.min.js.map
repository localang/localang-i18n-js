{"version":3,"file":"index.umd.min.js","sources":["../src/helpers/string/replacePlaceholders.ts","../src/core/index.ts","../src/core/builder/makeI18n.ts","../src/eslintPlugin/rules/generateI18nFile.ts","../src/helpers/string/isPlural.ts","../src/index.ts","../src/eslintPlugin/index.ts"],"sourcesContent":["/**\n * Replaces placeholders in text with given values.\n * @param text          Text with placeholders\n * @param placeholders  Object with placeholders and values\n * @returns             Text with replaced placeholders\n */\nexport const replacePlaceholders = (\n    text: string,\n    placeholders: Record<string, string | number> = {},\n): string => {\n    return text.replace(/\\{(\\w+)}/g, (match, key) => {\n        return key in placeholders ? String(placeholders[key]) : match;\n    });\n};\n","import type { Keyset, Lang } from './builder/types';\nimport { makeI18n } from './builder/makeI18n';\n\ntype Settings = {\n    /**\n     * Project language\n     * @default en\n     */\n    lang: Lang;\n};\n\n/**\n * Adds context wrapper to main function to store settings like app language.\n */\nexport class Api {\n    settings: Settings;\n\n    constructor() {\n        this.settings = {\n            lang: 'en',\n        };\n\n        this.setSettings = this.setSettings.bind(this);\n        this.makeI18n = this.makeI18n.bind(this);\n    }\n\n    setSettings(settings: Partial<Settings>) {\n        this.settings = {\n            ...this.settings,\n            ...settings,\n        };\n    }\n\n    makeI18n(keyset: Keyset, placeholders?: Record<string, string | number>) {\n        return makeI18n(this.settings.lang, keyset, placeholders);\n    }\n}\n","import type { Keyset, Lang } from './types';\nimport { replacePlaceholders } from '../../helpers/string/replacePlaceholders';\n\ntype MakeI18nResponse = (key: string) => string;\n\n/**\n * Creates function to work with translations.\n * @param lang - Current app language\n * @param keyset - Translations keyset\n * @param placeholders - Placeholders and its values\n * @returns - Function to work with translations.\n */\nexport const makeI18n = (\n    lang: Lang,\n    keyset: Keyset,\n    placeholders?: Record<string, string | number>,\n): MakeI18nResponse => {\n    return (key: string) => {\n        const translations = keyset[key];\n\n        if (!translations) {\n            return '';\n        }\n\n        const translation = translations[lang];\n\n        if (typeof translation === 'object' && translation !== null) {\n            if (!placeholders) {\n                return translation.zero;\n            }\n\n            const countKey = Object.keys(placeholders).find((key) =>\n                /^count([0-9+]?)+$/.test(key),\n            );\n            const count =\n                countKey && countKey in placeholders\n                    ? Number(placeholders[countKey]) || 0\n                    : 0;\n            const pluralForm =\n                count === 0 ? 'zero' : new Intl.PluralRules(lang).select(count);\n\n            return replacePlaceholders(translation[pluralForm], placeholders);\n        }\n\n        return translation\n            ? replacePlaceholders(translation, placeholders)\n            : '';\n    };\n};\n","import type { Rule } from 'eslint';\nimport fs from 'fs';\nimport type { Config } from '../index';\nimport {isPlural} from \"../../helpers/string/isPlural\";\n\n// TODO: comments\n\nfunction loadKeyset(fileName: string) {\n    if (fs.existsSync(fileName)) {\n        return JSON.parse(\n            fs\n                .readFileSync(fileName, 'utf8')\n                .replace(/export const keyset = |;/g, ''),\n        );\n    }\n    return {};\n}\n\nfunction saveKeyset(fileName: string, keyset: Record<string, unknown>) {\n    fs.writeFileSync(\n        fileName,\n        `export const keyset = ${JSON.stringify(keyset, null, 4)};\\n`,\n    );\n}\n\nfunction removeKeyset(fileName: string) {\n    if (fs.existsSync(fileName)) {\n        fs.unlinkSync(fileName);\n    }\n}\n\nexport const createGenerateI18nFileRule = ({\n    keyLanguage,\n    langs,\n    fileExt,\n}: Required<Config>): Rule.RuleModule => ({\n    create(context) {\n        const usedKeys: Set<string> = new Set();\n\n        return {\n            'CallExpression'(node) {\n                if (\n                    'name' in node.callee &&\n                    node.callee?.name === 'i18n' &&\n                    node.arguments.length >= 1 &&\n                    node.arguments[0]?.type === 'Literal' &&\n                    typeof node.arguments[0].value === 'string'\n                ) {\n                    usedKeys.add(node.arguments[0].value);\n                }\n            },\n            'Program:exit'() {\n                const fileName = context.filename.substring(\n                    0,\n                    context.filename.lastIndexOf('.'),\n                );\n                const i18nFileName = `${fileName}.i18n.${fileExt}`;\n                const existingKeyset = loadKeyset(i18nFileName);\n                const updatedKeyset = { ...existingKeyset };\n\n                usedKeys.forEach((key) => {\n                    if (!updatedKeyset[key]) {\n                        const isKeyPlural = isPlural(key);\n\n                        updatedKeyset[key] = {};\n\n                        langs.forEach((lang) => {\n                            const translation = lang === keyLanguage ? key : '';\n\n                            updatedKeyset[key][lang] = isKeyPlural ? {\n                                    zero: translation,\n                                    one: translation,\n                                    two: translation,\n                                    few: translation,\n                                    many: translation,\n                                    other: translation,\n                                } : translation\n                        });\n                    }\n                });\n\n                Object.keys(existingKeyset).forEach((key) => {\n                    if (!usedKeys.has(key)) {\n                        delete updatedKeyset[key];\n                    }\n                });\n\n                if (Object.keys(updatedKeyset).length === 0) {\n                    removeKeyset(i18nFileName);\n                } else {\n                    saveKeyset(i18nFileName, updatedKeyset);\n                }\n            },\n        };\n    },\n});\n","/**\n * Checks if the given text contains a plural placeholder.\n * A plural placeholder is defined as a string that starts with 'count' followed by an optional number.\n * @param text  The text to check for plural placeholders.\n * @returns     true if the text contains a plural placeholder, false otherwise.\n */\nexport const isPlural = (text: string): boolean => {\n    return /\\bcount\\d*\\b/.test(text);\n};\n","import { Api } from './core';\n\nexport const { makeI18n, setSettings } = new Api();\n\nexport { createEslintPlugin } from './eslintPlugin';\n","import type { ESLint } from 'eslint';\nimport { createGenerateI18nFileRule } from './rules/generateI18nFile';\nimport type { Lang } from '../core/builder/types';\n\n// TODO: import type\n/** Plugin's config */\nexport interface Config {\n    /**\n     * Key will be the default translation for some language\n     * @default en\n     */\n    keyLanguage?: Lang;\n    /**\n     * Languages in use\n     * @default ['en']\n     */\n    langs?: Lang[];\n    /**\n     * Generated file extension\n     * @default js\n     */\n    fileExt?: 'js' | 'ts';\n}\n\n/**\n * Creates ESLint plugin to generate I18n files.\n */\nexport const createEslintPlugin = ({\n    keyLanguage = 'en',\n    langs = ['en'],\n    fileExt = 'js',\n}: Config = {}): ESLint.Plugin => ({\n    // TODO: will it work instead of `ignores` in index.test.eslint.config.js\n    configs: {\n        generateI18nFile: [\n            {\n                ignores: ['**/*.i18n.*'],\n            },\n        ],\n    },\n    rules: {\n        'generate-i18n-file': createGenerateI18nFileRule({\n            keyLanguage,\n            langs,\n            fileExt,\n        }),\n    },\n});\n"],"names":["replacePlaceholders","text","placeholders","replace","match","key","String","Api","this","settings","lang","setSettings","bind","makeI18n","prototype","__assign","keyset","translations","translation","zero","countKey","Object","keys","find","test","count","Number","pluralForm","Intl","PluralRules","select","createGenerateI18nFileRule","_a","keyLanguage","langs","fileExt","create","context","usedKeys","Set","CallExpression","node","callee","name","arguments","length","_b","type","value","add","fileName","filename","substring","lastIndexOf","i18nFileName","concat","existingKeyset","fs","existsSync","JSON","parse","readFileSync","loadKeyset","updatedKeyset","forEach","isKeyPlural_1","one","two","few","many","other","has","unlinkSync","removeKeyset","writeFileSync","stringify","saveKeyset","_c","_d","_e","configs","generateI18nFile","ignores","rules"],"mappings":"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"}