{"version":3,"file":"index.umd.min.js","sources":["../src/helpers/string/replacePlaceholders.ts","../src/core/helpers/importKeyset.ts","../src/core/index.ts","../src/core/builder/makeI18n.ts","../src/eslintPlugin/rules/generateI18nFile.ts","../src/core/helpers/parseContent.ts","../src/helpers/string/isPlural.ts","../src/index.ts","../src/eslintPlugin/index.ts","../src/synchronizer/pull.ts","../src/synchronizer/push.ts"],"sourcesContent":["/**\n * Replaces placeholders in text with given values.\n * @param text          Text with placeholders\n * @param placeholders  Object with placeholders and values\n * @returns             Text with replaced placeholders\n */\nexport const replacePlaceholders = (\n    text: string,\n    placeholders: Record<string, string | number> = {},\n): string => {\n    return text.replace(/\\{(\\w+)}/g, (match, key) => {\n        return key in placeholders ? String(placeholders[key]) : match;\n    });\n};\n","import type { Keyset } from '../builder/types';\n\n/**\n * Imports keyset from i18n file.\n * @param filePath - Path to file.\n * @returns - Keyset.\n */\nexport const importKeyset = async (filePath: string): Promise<Keyset> => {\n    let keyset = {};\n\n    try {\n        const module = await import(filePath);\n        keyset = module.keyset ?? {};\n    } catch (error) {\n        console.log(`Reading error: ${error}`);\n    }\n\n    return keyset;\n};\n","import type { Keyset, Lang } from './builder/types';\nimport { makeI18n } from './builder/makeI18n';\n\nexport { importKeyset } from './helpers/importKeyset';\nexport { parseContent } from './helpers/parseContent';\n\ntype Settings = {\n    /**\n     * Project language\n     * @default en\n     */\n    lang: Lang;\n};\n\n/**\n * Adds context wrapper to main function to store settings like app language.\n */\nexport class Api {\n    settings: Settings;\n\n    constructor() {\n        this.settings = {\n            lang: 'en',\n        };\n\n        this.setSettings = this.setSettings.bind(this);\n        this.makeI18n = this.makeI18n.bind(this);\n    }\n\n    setSettings(settings: Partial<Settings>) {\n        this.settings = {\n            ...this.settings,\n            ...settings,\n        };\n    }\n\n    makeI18n(keyset: Keyset, placeholders?: Record<string, string | number>) {\n        return makeI18n(this.settings.lang, keyset, placeholders);\n    }\n}\n","import type { Keyset, Lang } from './types';\nimport { replacePlaceholders } from '../../helpers/string/replacePlaceholders';\n\ntype MakeI18nResponse = (key: string) => string;\n\n/**\n * Creates function to work with translations.\n * @param lang - Current app language\n * @param keyset - Translations keyset\n * @param placeholders - Placeholders and its values\n * @returns - Function to work with translations.\n */\nexport const makeI18n = (\n    lang: Lang,\n    keyset: Keyset,\n    placeholders?: Record<string, string | number>,\n): MakeI18nResponse => {\n    return (key: string) => {\n        const translations = keyset[key];\n\n        if (!translations) {\n            return '';\n        }\n\n        const translation = translations[lang];\n\n        if (typeof translation === 'object' && translation !== null) {\n            if (!placeholders) {\n                return translation.zero;\n            }\n\n            const countKey = Object.keys(placeholders).find((key) =>\n                /^count([0-9+]?)+$/.test(key),\n            );\n            const count =\n                countKey && countKey in placeholders\n                    ? Number(placeholders[countKey]) || 0\n                    : 0;\n            const pluralForm =\n                count === 0 ? 'zero' : new Intl.PluralRules(lang).select(count);\n\n            return replacePlaceholders(translation[pluralForm], placeholders);\n        }\n\n        return translation\n            ? replacePlaceholders(translation, placeholders)\n            : '';\n    };\n};\n","import type { Rule } from 'eslint';\nimport fs from 'fs';\nimport type { Config } from '../index';\nimport { isPlural } from '../../helpers/string/isPlural';\nimport path from 'path';\nimport { parseContent } from '../../core';\n\nconst moduleImportTemplate = \"import { makeI18n } from 'localang-i18n-js';\";\nconst moduleExportTemplate = 'export const i18n = makeI18n(keyset);';\n\nconst commonJSImportTemplate =\n    \"const { makeI18n } = require('localang-i18n-js');\";\nconst commonJSExportTemplate = 'module.exports = makeI18n(keyset);';\n\nconst getModuleImportFromI18nFileTemplate = (i18nFileName: string) =>\n    `import { i18n } from './${i18nFileName}';\\n`;\nconst getCommonJSImportFromI18nFileTemplate = (i18nFileName: string) =>\n    `const i18n = require('./${i18nFileName}');\\n`;\n\nconst importExportTemplates = {\n    module: {\n        importT: moduleImportTemplate,\n        exportT: moduleExportTemplate,\n        getImportFromI18nFileT: getModuleImportFromI18nFileTemplate,\n    },\n    commonjs: {\n        importT: commonJSImportTemplate,\n        exportT: commonJSExportTemplate,\n        getImportFromI18nFileT: getCommonJSImportFromI18nFileTemplate,\n    },\n};\n\n/**\n * Trying to parse i18n file.\n * @param fileName - Name of i18n file\n * @returns Parsed keyset or empty object\n */\nfunction loadKeyset(fileName: string) {\n    if (fs.existsSync(fileName)) {\n        const content = fs.readFileSync(fileName, 'utf8');\n\n        return parseContent(content);\n    }\n\n    return {};\n}\n\n/**\n * Saves keyset to i18n file.\n * @param fileName - Name of i18n file\n * @param keyset - Translations\n * @param exportT - String with export of keyset\n * @param importT - String with import of makeI18n function\n */\nfunction saveKeyset({\n    fileName,\n    keyset,\n    exportT,\n    importT,\n}: {\n    fileName: string;\n    keyset: Record<string, unknown>;\n    importT: string;\n    exportT: string;\n}) {\n    fs.writeFileSync(\n        fileName,\n        `${importT}\\n\\nconst keyset = ${JSON.stringify(\n            keyset,\n            null,\n            4,\n        )};\\n\\n${exportT}\\n`,\n    );\n}\n\n/**\n * Deletes file with keyset if it exists.\n * @param fileName - I18n file\n */\nfunction removeKeyset(fileName: string) {\n    if (fs.existsSync(fileName)) {\n        fs.unlinkSync(fileName);\n    }\n}\n\n/**\n * Adds import of i18n function from i18n file.\n * @param baseFile\n * @param importT\n */\nfunction addI18nFileImportStatement(baseFile: string, importT: string) {\n    const content = fs.readFileSync(baseFile, 'utf8');\n\n    const importRegex =\n        /import\\s*\\{\\s*i18n\\s*\\}\\s*from\\s*['\"]\\..*\\.i18n\\.js['\"]\\s*;/;\n    const requireRegex =\n        /const\\s*{\\s*i18n\\s*}\\s*=\\s*require\\s*\\(['\"]\\..*\\.i18n\\.js['\"]\\)\\s*;/;\n\n    if (!importRegex.test(content) && !requireRegex.test(content)) {\n        fs.writeFileSync(baseFile, importT + content);\n    }\n}\n\n/**\n * Builds rule which generates i18n files.\n * @param keyLanguage  Language which uses key\n * @param langs        Available languages\n * @param fileExt      I18n file extension\n * @param importType   Type of import and exports\n */\nexport const createGenerateI18nFileRule = ({\n    keyLanguage,\n    langs,\n    fileExt,\n    importType,\n}: Required<Config>): Rule.RuleModule => ({\n    create(context) {\n        const usedKeys: Set<string> = new Set();\n\n        const { importT, exportT, getImportFromI18nFileT } =\n            importExportTemplates[importType];\n\n        return {\n            'CallExpression'(node) {\n                if (\n                    'name' in node.callee &&\n                    node.callee?.name === 'i18n' &&\n                    node.arguments.length >= 1 &&\n                    node.arguments[0]?.type === 'Literal' &&\n                    typeof node.arguments[0].value === 'string' &&\n                    !context.filename.includes('.i18n.')\n                ) {\n                    usedKeys.add(node.arguments[0].value);\n                }\n            },\n            'Program:exit'() {\n                const fileName = context.filename.substring(\n                    0,\n                    context.filename.lastIndexOf('.'),\n                );\n                const i18nFileName = `${fileName}.i18n.${fileExt}`;\n                const existingKeyset = loadKeyset(i18nFileName);\n                const updatedKeyset = { ...existingKeyset };\n\n                usedKeys.forEach((key) => {\n                    if (!updatedKeyset[key]) {\n                        const isKeyPlural = isPlural(key);\n\n                        updatedKeyset[key] = {};\n\n                        langs.forEach((lang) => {\n                            const translation = lang === keyLanguage ? key : '';\n\n                            // @ts-expect-error -- TODO: TS2532: Object is possibly undefined\n                            updatedKeyset[key][lang] = isKeyPlural\n                                ? {\n                                      zero: translation,\n                                      one: translation,\n                                      two: translation,\n                                      few: translation,\n                                      many: translation,\n                                      other: translation,\n                                  }\n                                : translation;\n                        });\n                    }\n                });\n\n                Object.keys(existingKeyset).forEach((key) => {\n                    if (!usedKeys.has(key)) {\n                        delete updatedKeyset[key];\n                    }\n                });\n\n                if (Object.keys(updatedKeyset).length === 0) {\n                    removeKeyset(i18nFileName);\n                } else {\n                    saveKeyset({\n                        fileName: i18nFileName,\n                        keyset: updatedKeyset,\n                        importT,\n                        exportT,\n                    });\n\n                    addI18nFileImportStatement(\n                        context.filename,\n                        getImportFromI18nFileT(path.basename(i18nFileName)),\n                    );\n                }\n            },\n        };\n    },\n});\n","import type { Keyset } from '../builder/types';\n\n/**\n * Parses content from i18n file.\n * @param baseContent - Base string content.\n * @returns - Keyset.\n */\nexport const parseContent = (baseContent: string): Keyset => {\n    // remove keyset initialization\n    let content = baseContent.replace(/const keyset = |;/g, '');\n\n    // remove import\n    content = content.substring(content.indexOf('\\n') + 1);\n\n    // remove export\n    content = content.substring(0, content.lastIndexOf('\\n'));\n    content = content.substring(0, content.lastIndexOf('\\n'));\n    content = content.substring(0, content.lastIndexOf('\\n'));\n\n    let parsed = {};\n\n    try {\n        parsed = JSON.parse(content);\n    } catch (error) {\n        console.log(`JSON parse error: ${error}`);\n    }\n\n    return parsed;\n};\n","/**\n * Checks if the given text contains a plural placeholder.\n * A plural placeholder is defined as a string that starts with 'count' followed by an optional number.\n * @param text  The text to check for plural placeholders.\n * @returns     true if the text contains a plural placeholder, false otherwise.\n */\nexport const isPlural = (text: string): boolean => {\n    return /\\bcount\\d*\\b/.test(text);\n};\n","import { Api as I18nApi } from './core';\n\nexport const { makeI18n, setSettings } = new I18nApi();\n\nexport { createEslintPlugin } from './eslintPlugin';\n\nexport { pull, push } from './synchronizer';\n","import type { ESLint } from 'eslint';\nimport { createGenerateI18nFileRule } from './rules/generateI18nFile';\nimport type { Lang } from '../core/builder/types';\n\n/** Plugin's config */\nexport interface Config {\n    /**\n     * Key will be the default translation for some language\n     * @default en\n     */\n    keyLanguage?: Lang;\n    /**\n     * Languages in use\n     * @default ['en']\n     */\n    langs?: Lang[];\n    /**\n     * Generated file extension\n     * @default js\n     */\n    fileExt?: 'js' | 'ts';\n    /**\n     * Import/export type for i18n files\n     * @default module\n     */\n    importType?: 'module' | 'commonjs';\n}\n\n/**\n * Creates ESLint plugin to generate I18n files.\n */\nexport const createEslintPlugin = ({\n    keyLanguage = 'en',\n    langs = ['en'],\n    fileExt = 'js',\n    importType = 'module',\n}: Config = {}): ESLint.Plugin => ({\n    // TODO: will it work instead of `ignores` in index.test.eslint.config.js?\n    configs: {\n        generateI18nFile: [\n            {\n                ignores: ['**/*.i18n.*'],\n            },\n        ],\n    },\n    rules: {\n        'generate-i18n-file': createGenerateI18nFileRule({\n            keyLanguage,\n            langs,\n            fileExt,\n            importType,\n        }),\n    },\n});\n","import fs from 'fs';\nimport https from 'https';\nimport type { Keyset } from '../core/builder/types';\n\n/**\n * Updates content of local files.\n * @param files - Files and keysets.\n */\nconst sync = (files: Array<{ filePath: string; keyset: Keyset }>) => {\n    files.forEach(({ filePath, keyset }) => {\n        if (!fs.existsSync(filePath)) {\n            console.log(`File ${filePath} doesn't exist`);\n            return;\n        }\n\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                throw new Error(\n                    `Error reading file ${filePath}: ${err.message}`,\n                );\n            }\n\n            const newObjectString = JSON.stringify(keyset, null, 4).replace(\n                /\"(\\w+)\":/g,\n                '$1:',\n            );\n            const regex = /const keyset = {[\\s\\S]*?};/;\n            const updatedCodeString = data.replace(\n                regex,\n                `const keyset = ${newObjectString};`,\n            );\n\n            fs.writeFileSync(filePath, updatedCodeString);\n        });\n    });\n};\n\n/**\n * Loads translations from localang.xyz and updates local files.\n * @param authToken - Authorization token with translations:read permission on localang.xyz.\n * @param projectId - ID of project on localang.xyz.\n */\nexport const pull = (authToken: string, projectId: number) => {\n    const req = https.request(\n        {\n            hostname: 'https://localang.xyz',\n            port: 443,\n            path: `/api/translations/getAll?project_id=${projectId}`,\n            method: 'GET',\n            headers: {\n                'Authorization': `Bearer ${authToken}`,\n                'Content-Type': 'application/json',\n            },\n        },\n        (res) => {\n            let data = '';\n\n            res.on('data', (chunk) => {\n                data += chunk;\n            });\n\n            res.on('end', () => {\n                const result = JSON.parse(data);\n\n                if (result?.status !== 'success') {\n                    throw new Error('Error getting keysets');\n                }\n\n                sync(result.files);\n            });\n        },\n    );\n\n    req.on('error', function (e) {\n        throw new Error(`Error syncing keysets: ${e.message}`);\n    });\n\n    req.end();\n};\n","import path from 'path';\nimport fs from 'fs';\nimport https from 'https';\nimport { importKeyset } from '../core';\nimport type { Keyset } from '../core/builder/types';\n\n/**\n * Uploads local translations to localang.xyz.\n * @param authToken - Authorization token with translations:update permission on localang.xyz.\n * @param projectId - ID of project on localang.xyz.\n * @param files - I18n files from which translations should be used.\n */\nexport const push = (authToken: string, projectId: number, files: string[]) => {\n    const requestData: Record<\n        string,\n        {\n            operation: 'update' | 'delete';\n            translations?: Keyset;\n        }\n    > = {};\n\n    files.forEach(async (file) => {\n        const filePath = path.resolve(process.cwd(), file);\n        const baseFile = filePath.replace(/\\.i18n\\./, '.');\n\n        if (fs.existsSync(filePath)) {\n            try {\n                const content = await importKeyset(filePath);\n\n                requestData[baseFile] = {\n                    operation: 'update',\n                    translations: content,\n                };\n            } catch (parseError: unknown) {\n                throw new Error(\n                    `Error parsing JSON in file ${file}: ${\n                        typeof parseError === 'object' &&\n                        parseError !== null &&\n                        'message' in parseError\n                            ? parseError.message\n                            : ''\n                    }`,\n                );\n            }\n        } else {\n            requestData[baseFile] = {\n                operation: 'delete',\n            };\n        }\n    });\n\n    const req = https.request(\n        {\n            hostname: 'https://localang.xyz',\n            port: 443,\n            path: '/api/translations/update',\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${authToken}`,\n                'Content-Type': 'application/json',\n            },\n        },\n        (res) => {\n            let data = '';\n\n            res.on('data', (chunk) => {\n                data += chunk;\n            });\n\n            res.on('end', () => {\n                const result = JSON.parse(data);\n\n                if (result?.status !== 'success') {\n                    throw new Error('Error syncing keysets');\n                }\n            });\n        },\n    );\n\n    req.write({\n        project_id: projectId,\n        files: requestData,\n    });\n\n    req.on('error', function (e) {\n        throw new Error(`Error syncing keysets: ${e.message}`);\n    });\n\n    req.end();\n};\n"],"names":["replacePlaceholders","text","placeholders","replace","match","key","String","importKeyset","filePath","__awaiter","keyset","import","module_1","_b","sent","_a","console","log","error_1","Api","this","settings","lang","setSettings","bind","makeI18n","prototype","__assign","translations","translation","zero","countKey","Object","keys","find","test","count","Number","pluralForm","Intl","PluralRules","select","importExportTemplates","module","importT","exportT","getImportFromI18nFileT","i18nFileName","concat","commonjs","loadKeyset","fileName","fs","existsSync","baseContent","content","substring","indexOf","lastIndexOf","parsed","JSON","parse","error","parseContent","readFileSync","createGenerateI18nFileRule","keyLanguage","langs","fileExt","importType","create","context","usedKeys","Set","CallExpression","node","callee","name","arguments","length","type","value","filename","includes","add","existingKeyset","updatedKeyset","forEach","isKeyPlural_1","one","two","few","many","other","has","unlinkSync","removeKeyset","writeFileSync","stringify","saveKeyset","baseFile","addI18nFileImportStatement","path","basename","I18nApi","_c","_d","_e","_f","configs","generateI18nFile","ignores","rules","authToken","projectId","req","https","request","hostname","port","method","headers","Authorization","res","data","on","chunk","result","status","Error","files","readFile","err","message","newObjectString","updatedCodeString","e","end","requestData","file","resolve","process","cwd","operation","parseError_1","write","project_id"],"mappings":"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"}