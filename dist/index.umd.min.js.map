{"version":3,"file":"index.umd.min.js","sources":["../src/helpers/string/replacePlaceholders.ts","../src/core/index.ts","../src/core/builder/makeI18n.ts","../src/eslintPlugin/rules/generateI18nFile.ts","../src/helpers/string/isPlural.ts","../src/index.ts","../src/eslintPlugin/index.ts"],"sourcesContent":["/**\n * Replaces placeholders in text with given values.\n * @param text          Text with placeholders\n * @param placeholders  Object with placeholders and values\n * @returns             Text with replaced placeholders\n */\nexport const replacePlaceholders = (\n    text: string,\n    placeholders: Record<string, string | number> = {},\n): string => {\n    return text.replace(/\\{(\\w+)}/g, (match, key) => {\n        return key in placeholders ? String(placeholders[key]) : match;\n    });\n};\n","import type { Keyset, Lang } from './builder/types';\nimport { makeI18n } from './builder/makeI18n';\n\ntype Settings = {\n    /**\n     * Project language\n     * @default en\n     */\n    lang: Lang;\n};\n\n/**\n * Adds context wrapper to main function to store settings like app language.\n */\nexport class Api {\n    settings: Settings;\n\n    constructor() {\n        this.settings = {\n            lang: 'en',\n        };\n\n        this.setSettings = this.setSettings.bind(this);\n        this.makeI18n = this.makeI18n.bind(this);\n    }\n\n    setSettings(settings: Partial<Settings>) {\n        this.settings = {\n            ...this.settings,\n            ...settings,\n        };\n    }\n\n    makeI18n(keyset: Keyset, placeholders?: Record<string, string | number>) {\n        return makeI18n(this.settings.lang, keyset, placeholders);\n    }\n}\n","import type { Keyset, Lang } from './types';\nimport { replacePlaceholders } from '../../helpers/string/replacePlaceholders';\n\ntype MakeI18nResponse = (key: string) => string;\n\n/**\n * Creates function to work with translations.\n * @param lang - Current app language\n * @param keyset - Translations keyset\n * @param placeholders - Placeholders and its values\n * @returns - Function to work with translations.\n */\nexport const makeI18n = (\n    lang: Lang,\n    keyset: Keyset,\n    placeholders?: Record<string, string | number>,\n): MakeI18nResponse => {\n    return (key: string) => {\n        const translations = keyset[key];\n\n        if (!translations) {\n            return '';\n        }\n\n        const translation = translations[lang];\n\n        if (typeof translation === 'object' && translation !== null) {\n            if (!placeholders) {\n                return translation.zero;\n            }\n\n            const countKey = Object.keys(placeholders).find((key) =>\n                /^count([0-9+]?)+$/.test(key),\n            );\n            const count =\n                countKey && countKey in placeholders\n                    ? Number(placeholders[countKey]) || 0\n                    : 0;\n            const pluralForm =\n                count === 0 ? 'zero' : new Intl.PluralRules(lang).select(count);\n\n            return replacePlaceholders(translation[pluralForm], placeholders);\n        }\n\n        return translation\n            ? replacePlaceholders(translation, placeholders)\n            : '';\n    };\n};\n","import type { Rule } from 'eslint';\nimport fs from 'fs';\nimport type { Config } from '../index';\nimport { isPlural } from '../../helpers/string/isPlural';\nimport path from \"path\";\n\n// TODO: comments\n\nconst moduleImportTemplate = 'import { makeI18n } from \\'localang-i18n-js\\';';\nconst moduleExportTemplate = 'export const i18n = makeI18n(keyset);'\n\nconst commonJSImportTemplate = 'const { makeI18n } = require(\\'localang-i18n-js\\');';\nconst commonJSExportTemplate = 'module.exports = makeI18n(keyset);'\n\nconst getModuleImportFromI18nFileTemplate = (i18nFileName: string) => `import { i18n } from './${i18nFileName}';`;\nconst getCommonJSImportFromI18nFileTemplate = (i18nFileName: string) => `const i18n = require('./${i18nFileName}');`;\n\nconst importExportTemplates = {\n    module: {\n        importT: moduleImportTemplate,\n        exportT: moduleExportTemplate,\n        getImportFromI18nFileT: getModuleImportFromI18nFileTemplate,\n    },\n    commonjs: {\n        importT: commonJSImportTemplate,\n        exportT: commonJSExportTemplate,\n        getImportFromI18nFileT: getCommonJSImportFromI18nFileTemplate,\n    },\n};\n\nfunction loadKeyset(fileName: string) {\n    if (fs.existsSync(fileName)) {\n        let content = fs.readFileSync(fileName, 'utf8')\n\n        // remove keyset initialization\n        content = content.replace(/const keyset = |;/g, '');\n\n        // remove import\n        content = content.substring(content.indexOf('\\n') + 1);\n\n        // remove export\n        content = content.substring(0, content.lastIndexOf('\\n'));\n        content = content.substring(0, content.lastIndexOf('\\n'));\n\n        return JSON.parse(content);\n    }\n    return {};\n}\n\nfunction saveKeyset({ fileName, keyset, exportT, importT}: {fileName: string, keyset: Record<string, unknown>, importT: string, exportT: string}) {\n    fs.writeFileSync(\n        fileName,\n        `${importT}\\n\\nconst keyset = ${JSON.stringify(keyset, null, 4)};\\n\\n${exportT}\\n`,\n    );\n}\n\nfunction removeKeyset(fileName: string) {\n    if (fs.existsSync(fileName)) {\n        fs.unlinkSync(fileName);\n    }\n}\n\nfunction addI18nFileImportStatement(baseFile: string, importT: string) {\n    const content = fs.readFileSync(baseFile, 'utf8');\n\n    const importRegex = /import\\s*\\{\\s*i18n\\s*\\}\\s*from\\s*['\"]\\..*\\.i18n\\.js['\"]\\s*;/;\n    const requireRegex = /const\\s*{\\s*i18n\\s*}\\s*=\\s*require\\s*\\(['\"]\\..*\\.i18n\\.js['\"]\\)\\s*;/;\n\n    if (!importRegex.test(content) && !requireRegex.test(content)) {\n        fs.writeFileSync(baseFile, importT + content);\n    }\n}\n\nexport const createGenerateI18nFileRule = ({\n    keyLanguage,\n    langs,\n    fileExt,\n    importType,\n}: Required<Config>): Rule.RuleModule => ({\n    create(context) {\n        const usedKeys: Set<string> = new Set();\n\n        const { importT, exportT, getImportFromI18nFileT } = importExportTemplates[importType];\n\n        return {\n            'CallExpression'(node) {\n                if (\n                    'name' in node.callee &&\n                    node.callee?.name === 'i18n' &&\n                    node.arguments.length >= 1 &&\n                    node.arguments[0]?.type === 'Literal' &&\n                    typeof node.arguments[0].value === 'string'\n                ) {\n                    if (!context.filename.includes('.i18n.')) {\n                        usedKeys.add(node.arguments[0].value);\n                    }\n                }\n            },\n            'Program:exit'() {\n                const fileName = context.filename.substring(\n                    0,\n                    context.filename.lastIndexOf('.'),\n                );\n                const i18nFileName = `${fileName}.i18n.${fileExt}`;\n                const existingKeyset = loadKeyset(i18nFileName);\n                const updatedKeyset = { ...existingKeyset };\n\n                usedKeys.forEach((key) => {\n                    if (!updatedKeyset[key]) {\n                        const isKeyPlural = isPlural(key);\n\n                        updatedKeyset[key] = {};\n\n                        langs.forEach((lang) => {\n                            const translation = lang === keyLanguage ? key : '';\n\n                            updatedKeyset[key][lang] = isKeyPlural\n                                ? {\n                                      zero: translation,\n                                      one: translation,\n                                      two: translation,\n                                      few: translation,\n                                      many: translation,\n                                      other: translation,\n                                  }\n                                : translation;\n                        });\n                    }\n                });\n\n                Object.keys(existingKeyset).forEach((key) => {\n                    if (!usedKeys.has(key)) {\n                        delete updatedKeyset[key];\n                    }\n                });\n\n                if (Object.keys(updatedKeyset).length === 0) {\n                    removeKeyset(i18nFileName);\n                } else {\n                    saveKeyset({\n                        fileName: i18nFileName,\n                        keyset: updatedKeyset,\n                        importT,\n                        exportT,\n                    });\n\n                    addI18nFileImportStatement(context.filename, getImportFromI18nFileT(path.basename(i18nFileName)));\n                }\n            },\n        };\n    },\n});\n","/**\n * Checks if the given text contains a plural placeholder.\n * A plural placeholder is defined as a string that starts with 'count' followed by an optional number.\n * @param text  The text to check for plural placeholders.\n * @returns     true if the text contains a plural placeholder, false otherwise.\n */\nexport const isPlural = (text: string): boolean => {\n    return /\\bcount\\d*\\b/.test(text);\n};\n","import { Api } from './core';\n\nexport const { makeI18n, setSettings } = new Api();\n\nexport { createEslintPlugin } from './eslintPlugin';\n","import type { ESLint } from 'eslint';\nimport { createGenerateI18nFileRule } from './rules/generateI18nFile';\nimport type { Lang } from '../core/builder/types';\n\n// TODO: import type\n/** Plugin's config */\nexport interface Config {\n    /**\n     * Key will be the default translation for some language\n     * @default en\n     */\n    keyLanguage?: Lang;\n    /**\n     * Languages in use\n     * @default ['en']\n     */\n    langs?: Lang[];\n    /**\n     * Generated file extension\n     * @default js\n     */\n    fileExt?: 'js' | 'ts';\n    /**\n     * Import/export type for i18n files\n     * @default module\n     */\n    importType?: 'module' | 'commonjs';\n}\n\n/**\n * Creates ESLint plugin to generate I18n files.\n */\nexport const createEslintPlugin = ({\n    keyLanguage = 'en',\n    langs = ['en'],\n    fileExt = 'js',\n    importType = 'module',\n}: Config = {}): ESLint.Plugin => ({\n    // TODO: will it work instead of `ignores` in index.test.eslint.config.js\n    configs: {\n        generateI18nFile: [\n            {\n                ignores: ['**/*.i18n.*'],\n            },\n        ],\n    },\n    rules: {\n        'generate-i18n-file': createGenerateI18nFileRule({\n            keyLanguage,\n            langs,\n            fileExt,\n            importType,\n        }),\n    },\n});\n"],"names":["replacePlaceholders","text","placeholders","replace","match","key","String","Api","this","settings","lang","setSettings","bind","makeI18n","prototype","__assign","keyset","translations","translation","zero","countKey","Object","keys","find","test","count","Number","pluralForm","Intl","PluralRules","select","importExportTemplates","module","importT","exportT","getImportFromI18nFileT","i18nFileName","concat","commonjs","createGenerateI18nFileRule","_a","keyLanguage","langs","fileExt","importType","create","context","usedKeys","Set","CallExpression","node","callee","name","arguments","length","_b","type","value","filename","includes","add","fileName","substring","lastIndexOf","existingKeyset","fs","existsSync","content","readFileSync","indexOf","JSON","parse","loadKeyset","updatedKeyset","forEach","isKeyPlural_1","one","two","few","many","other","has","unlinkSync","removeKeyset","writeFileSync","stringify","saveKeyset","baseFile","addI18nFileImportStatement","path","basename","_c","_d","_e","_f","configs","generateI18nFile","ignores","rules"],"mappings":"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"}