{"version":3,"file":"index.mjs","sources":["../src/helpers/string/replacePlaceholders.ts","../src/core/builder/makeI18n.ts","../src/core/index.ts","../src/helpers/string/isPlural.ts","../src/eslintPlugin/rules/generateI18nFile.ts","../src/eslintPlugin/index.ts","../src/index.ts"],"sourcesContent":["/**\n * Replaces placeholders in text with given values.\n * @param text          Text with placeholders\n * @param placeholders  Object with placeholders and values\n * @returns             Text with replaced placeholders\n */\nexport const replacePlaceholders = (\n    text: string,\n    placeholders: Record<string, string | number> = {},\n): string => {\n    return text.replace(/\\{(\\w+)}/g, (match, key) => {\n        return key in placeholders ? String(placeholders[key]) : match;\n    });\n};\n","import type { Keyset, Lang } from './types';\nimport { replacePlaceholders } from '../../helpers/string/replacePlaceholders';\n\ntype MakeI18nResponse = (key: string) => string;\n\n/**\n * Creates function to work with translations.\n * @param lang - Current app language\n * @param keyset - Translations keyset\n * @param placeholders - Placeholders and its values\n * @returns - Function to work with translations.\n */\nexport const makeI18n = (\n    lang: Lang,\n    keyset: Keyset,\n    placeholders?: Record<string, string | number>,\n): MakeI18nResponse => {\n    return (key: string) => {\n        const translations = keyset[key];\n\n        if (!translations) {\n            return '';\n        }\n\n        const translation = translations[lang];\n\n        if (typeof translation === 'object' && translation !== null) {\n            if (!placeholders) {\n                return translation.zero;\n            }\n\n            const countKey = Object.keys(placeholders).find((key) =>\n                /^count([0-9+]?)+$/.test(key),\n            );\n            const count =\n                countKey && countKey in placeholders\n                    ? Number(placeholders[countKey]) || 0\n                    : 0;\n            const pluralForm =\n                count === 0 ? 'zero' : new Intl.PluralRules(lang).select(count);\n\n            return replacePlaceholders(translation[pluralForm], placeholders);\n        }\n\n        return translation\n            ? replacePlaceholders(translation, placeholders)\n            : '';\n    };\n};\n","import type { Keyset, Lang } from './builder/types';\nimport { makeI18n } from './builder/makeI18n';\n\ntype Settings = {\n    /**\n     * Project language\n     * @default en\n     */\n    lang: Lang;\n};\n\n/**\n * Adds context wrapper to main function to store settings like app language.\n */\nexport class Api {\n    settings: Settings;\n\n    constructor() {\n        this.settings = {\n            lang: 'en',\n        };\n\n        this.setSettings = this.setSettings.bind(this);\n        this.makeI18n = this.makeI18n.bind(this);\n    }\n\n    setSettings(settings: Partial<Settings>) {\n        this.settings = {\n            ...this.settings,\n            ...settings,\n        };\n    }\n\n    makeI18n(keyset: Keyset, placeholders?: Record<string, string | number>) {\n        return makeI18n(this.settings.lang, keyset, placeholders);\n    }\n}\n","/**\n * Checks if the given text contains a plural placeholder.\n * A plural placeholder is defined as a string that starts with 'count' followed by an optional number.\n * @param text  The text to check for plural placeholders.\n * @returns     true if the text contains a plural placeholder, false otherwise.\n */\nexport const isPlural = (text: string): boolean => {\n    return /\\bcount\\d*\\b/.test(text);\n};\n","import type { Rule } from 'eslint';\nimport fs from 'fs';\nimport type { Config } from '../index';\nimport {isPlural} from \"../../helpers/string/isPlural\";\n\n// TODO: comments\n\nfunction loadKeyset(fileName: string) {\n    if (fs.existsSync(fileName)) {\n        return JSON.parse(\n            fs\n                .readFileSync(fileName, 'utf8')\n                .replace(/export const keyset = |;/g, ''),\n        );\n    }\n    return {};\n}\n\nfunction saveKeyset(fileName: string, keyset: Record<string, unknown>) {\n    fs.writeFileSync(\n        fileName,\n        `export const keyset = ${JSON.stringify(keyset, null, 4)};\\n`,\n    );\n}\n\nfunction removeKeyset(fileName: string) {\n    if (fs.existsSync(fileName)) {\n        fs.unlinkSync(fileName);\n    }\n}\n\nexport const createGenerateI18nFileRule = ({\n    keyLanguage,\n    langs,\n    fileExt,\n}: Required<Config>): Rule.RuleModule => ({\n    create(context) {\n        const usedKeys: Set<string> = new Set();\n\n        return {\n            'CallExpression'(node) {\n                if (\n                    'name' in node.callee &&\n                    node.callee?.name === 'i18n' &&\n                    node.arguments.length >= 1 &&\n                    node.arguments[0]?.type === 'Literal' &&\n                    typeof node.arguments[0].value === 'string'\n                ) {\n                    usedKeys.add(node.arguments[0].value);\n                }\n            },\n            'Program:exit'() {\n                const fileName = context.filename.substring(\n                    0,\n                    context.filename.lastIndexOf('.'),\n                );\n                const i18nFileName = `${fileName}.i18n.${fileExt}`;\n                const existingKeyset = loadKeyset(i18nFileName);\n                const updatedKeyset = { ...existingKeyset };\n\n                usedKeys.forEach((key) => {\n                    if (!updatedKeyset[key]) {\n                        const isKeyPlural = isPlural(key);\n\n                        updatedKeyset[key] = {};\n\n                        langs.forEach((lang) => {\n                            const translation = lang === keyLanguage ? key : '';\n\n                            updatedKeyset[key][lang] = isKeyPlural ? {\n                                    zero: translation,\n                                    one: translation,\n                                    two: translation,\n                                    few: translation,\n                                    many: translation,\n                                    other: translation,\n                                } : translation\n                        });\n                    }\n                });\n\n                Object.keys(existingKeyset).forEach((key) => {\n                    if (!usedKeys.has(key)) {\n                        delete updatedKeyset[key];\n                    }\n                });\n\n                if (Object.keys(updatedKeyset).length === 0) {\n                    removeKeyset(i18nFileName);\n                } else {\n                    saveKeyset(i18nFileName, updatedKeyset);\n                }\n            },\n        };\n    },\n});\n","import type { ESLint } from 'eslint';\nimport { createGenerateI18nFileRule } from './rules/generateI18nFile';\nimport type { Lang } from '../core/builder/types';\n\n// TODO: import type\n/** Plugin's config */\nexport interface Config {\n    /**\n     * Key will be the default translation for some language\n     * @default en\n     */\n    keyLanguage?: Lang;\n    /**\n     * Languages in use\n     * @default ['en']\n     */\n    langs?: Lang[];\n    /**\n     * Generated file extension\n     * @default js\n     */\n    fileExt?: 'js' | 'ts';\n}\n\n/**\n * Creates ESLint plugin to generate I18n files.\n */\nexport const createEslintPlugin = ({\n    keyLanguage = 'en',\n    langs = ['en'],\n    fileExt = 'js',\n}: Config = {}): ESLint.Plugin => ({\n    // TODO: will it work instead of `ignores` in index.test.eslint.config.js\n    configs: {\n        generateI18nFile: [\n            {\n                ignores: ['**/*.i18n.*'],\n            },\n        ],\n    },\n    rules: {\n        'generate-i18n-file': createGenerateI18nFileRule({\n            keyLanguage,\n            langs,\n            fileExt,\n        }),\n    },\n});\n","import { Api } from './core';\n\nexport const { makeI18n, setSettings } = new Api();\n\nexport { createEslintPlugin } from './eslintPlugin';\n"],"names":["makeI18n"],"mappings":"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"}